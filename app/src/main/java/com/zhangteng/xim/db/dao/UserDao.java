package com.zhangteng.xim.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.zhangteng.xim.db.bean.LocalUser;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER".
 */
public class UserDao extends AbstractDao<LocalUser, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" +
                "\"id\" INTEGER AUTO_INCREMENT PRIMARY KEY ," +
                "\"objectId\" TEXT ," +
                "\"mobilePhoneNumber\" TEXT ," +
                "\"email\" TEXT ," +
                "\"sex\" INTEGER ," +
                "\"age\" INTEGER ," +
                "\"schoolId\" INTEGER ," +
                "\"roleId\" INTEGER ," +
                "\"gradeId\" INTEGER ," +
                "\"cityId\" INTEGER ," +
                "\"areaId\" INTEGER ," +
                "\"provinceId\" INTEGER ," +
                "\"classId\" INTEGER ," +
                "\"realName\" TEXT ," +
                "\"username\" TEXT ," +
                "\"avatar\" TEXT)");
    }

    public UserDao(DaoConfig config) {
        super(config);
    }


    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalUser entity) {
        stmt.clearBindings();

        int index = 0;
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(index++, id);
        }

        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(index++, objectId);
        }
        String mobilePhoneNumber = entity.getMobilePhoneNumber();
        if (mobilePhoneNumber != null) {
            stmt.bindString(index++, mobilePhoneNumber);
        }
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(index++, email);
        }
        Integer sex = entity.getSex();
        stmt.bindLong(index++, sex);

        Integer age = entity.getAge();
        stmt.bindLong(index++, age);

        Integer schoolId = entity.getSchoolId();
        stmt.bindLong(index++, schoolId);

        Integer roleId = entity.getRoleId();
        stmt.bindLong(index++, roleId);

        Integer gradeId = entity.getGradeId();
        stmt.bindLong(index++, gradeId);

        Integer cityId = entity.getCityId();
        stmt.bindLong(index++, cityId);

        Integer areaId = entity.getAreaId();
        stmt.bindLong(index++, areaId);

        Integer provinceId = entity.getProvinceId();
        stmt.bindLong(index++, provinceId);

        Integer classId = entity.getClassId();
        stmt.bindLong(index++, classId);

        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(index++, realName);
        }

        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(index++, username);
        }

        String icoPath = entity.getIcoPath();
        if (icoPath != null) {
            stmt.bindString(index++, icoPath);
        }

        index = 0;
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalUser entity) {
        stmt.clearBindings();
        int index = 0;
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(index++, id);
        }

        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(index++, objectId);
        }
        String mobilePhoneNumber = entity.getMobilePhoneNumber();
        if (mobilePhoneNumber != null) {
            stmt.bindString(index++, mobilePhoneNumber);
        }
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(index++, email);
        }
        Integer sex = entity.getSex();
        stmt.bindLong(index++, sex);

        Integer age = entity.getAge();
        stmt.bindLong(index++, age);

        Integer schoolId = entity.getSchoolId();
        stmt.bindLong(index++, schoolId);

        Integer roleId = entity.getRoleId();
        stmt.bindLong(index++, roleId);

        Integer gradeId = entity.getGradeId();
        stmt.bindLong(index++, gradeId);

        Integer cityId = entity.getCityId();
        stmt.bindLong(index++, cityId);

        Integer areaId = entity.getAreaId();
        stmt.bindLong(index++, areaId);

        Integer provinceId = entity.getProvinceId();
        stmt.bindLong(index++, provinceId);

        Integer classId = entity.getClassId();
        stmt.bindLong(index++, classId);

        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(index++, realName);
        }

        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(index++, username);
        }

        String icoPath = entity.getIcoPath();
        if (icoPath != null) {
            stmt.bindString(index++, icoPath);
        }

        index = 0;
    }

    @Override
    public LocalUser readEntity(Cursor cursor, int offset) {
        LocalUser entity = new LocalUser(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0),
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1),
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2),
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3),
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4),
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5),
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6),
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7),
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8),
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9),
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10),
                cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11),
                cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12),
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13),
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14),
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15)
        );
        return entity;
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public void readEntity(Cursor cursor, LocalUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobilePhoneNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        if (!cursor.isNull(offset + 4)) {
            entity.setSex((int) cursor.getLong(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            entity.setAge((int) cursor.getLong(offset + 5));
        }
        if (!cursor.isNull(offset + 6)) {
            entity.setSchoolId((int) cursor.getLong(offset + 6));
        }
        if (!cursor.isNull(offset + 7)) {
            entity.setRoleId((int) cursor.getLong(offset + 7));
        }
        if (!cursor.isNull(offset + 8)) {
            entity.setGradeId((int) cursor.getLong(offset + 8));
        }
        if (!cursor.isNull(offset + 9)) {
            entity.setCityId((int) cursor.getLong(offset + 9));
        }
        if (!cursor.isNull(offset + 10)) {
            entity.setAreaId((int) cursor.getLong(offset + 10));
        }
        if (!cursor.isNull(offset + 11)) {
            entity.setProvinceId((int) cursor.getLong(offset + 11));
        }
        if (!cursor.isNull(offset + 12)) {
            entity.setClassId((int) cursor.getLong(offset + 12));
        }
        entity.setRealName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUsername(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIcoPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
    }

    @Override
    protected final Long updateKeyAfterInsert(LocalUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(LocalUser entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalUser entity) {
        return entity.getId() != null;
    }

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", true, "objectId");
        public final static Property MobilePhoneNumber = new Property(2, String.class, "mobilePhoneNumber", false, "mobilePhoneNumber");
        public final static Property Email = new Property(3, String.class, "email", false, "email");
        public final static Property Sex = new Property(4, Long.class, "sex", false, "sex");
        public final static Property Age = new Property(5, Long.class, "age", false, "age");
        public final static Property SchoolId = new Property(6, Long.class, "schoolId", false, "schoolId");
        public final static Property RoleId = new Property(7, Long.class, "roleId", false, "roleId");
        public final static Property GradeId = new Property(8, Long.class, "gradeId", false, "gradeId");
        public final static Property CityId = new Property(9, Long.class, "cityId", false, "cityId");
        public final static Property AreaId = new Property(10, Long.class, "areaId", false, "areaId");
        public final static Property ProvinceId = new Property(11, Long.class, "provinceId", false, "provinceId");
        public final static Property ClassId = new Property(12, Long.class, "classId", false, "classId");
        public final static Property RealName = new Property(13, String.class, "realName", false, "realName");
        public final static Property Username = new Property(14, String.class, "username", false, "username");
        public final static Property Avatar = new Property(15, String.class, "avatar", false, "avatar");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
